/*
 * Copyright (c) 2015 Jonas Kalderstam.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.1.0'
    // the latest version of the android-apt plugin for annotations
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    // For publishing stuff to Google Play
    classpath 'com.github.triplet.gradle:play-publisher:1.1.4'
  }
}

// Apply android plugin first
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

// For annotations
apply plugin: 'android-apt'
def AAVersion = '3.3.2'

repositories {
  jcenter()
}

play {
  track = 'beta'
  serviceAccountEmail = '724886095148-vib4jepvj4q8snt1hrqtopncijipk1eu@developer.gserviceaccount.com'
  pk12File = file('/home/jonas/.ssh/Google Play Android Developer-bda1f9b450d2.p12')
}

// query git for the the SHA, Tag and commit count. Use these to automate versioning.
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()
def gitCommitCount =
        Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

android {
  compileSdkVersion 23
  buildToolsVersion '23.0.2'

  lintOptions {
    abortOnError false
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'

    //exclude this because Truth and Espresso Core both have guava in them
    exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
  }

  defaultConfig {
    applicationId "com.nononsenseapps.notepad"
    minSdkVersion 14
    targetSdkVersion 23
    // 60000 to be above all previous versions before gitCommitCount was used
    versionCode 60000 + gitCommitCount
    versionName gitTag
    archivesBaseName = "nononsensenotes-${gitTag}".toString()

    resValue "string", "VERSION_NAME", "${gitTag}"
    resValue "string", "GIT_SHA", "${gitSha}"
    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    // If Non-Free libraries are to be used
    buildConfigField "boolean", "NONFREE", "false"
    buildConfigField "boolean", "DROPBOX_ENABLED", "false"

    //default test instrumentation runner
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  productFlavors {
    free {}
    play {
      // If Non-Free libraries are to be used
      buildConfigField "boolean", "NONFREE", "true"
      buildConfigField "boolean", "DROPBOX_ENABLED", "true"
    }
  }

  sourceSets {
    playBeta {
      // Include play sources
      java.srcDirs = ['src/play/java']
      res.srcDirs = ['src/play/res', 'src/playBeta/res']
      manifest.srcFile 'src/play/AndroidManifest.xml'
    }
  }

  if (project.hasProperty('STORE_FILE')) {
    signingConfigs {
      release {
        storeFile file(STORE_FILE)
        storePassword STORE_PASSWORD
        keyAlias KEY_ALIAS
        keyPassword KEY_PASSWORD
      }
    }

    buildTypes {
      release {
        signingConfig signingConfigs.release
      }
    }
  } else {
    println "No key store defined. Signed release not available..."
  }


  //for Robotium
//  sourceSets {
//
//    androidTest {
//      java.srcDirs = ['androidTest/java']
//    }
//
//  }

}

// annotations
apt {
  arguments {
    //resourcePackageName android.defaultConfig.applicationId
    androidManifestFile variant.outputs[0].processResources.manifestFile
  }
}

dependencies {
  //compile fileTree(dir: 'libs', include: '*.jar')
  compile 'com.android.support:support-v4:23.1.0'
  compile 'com.android.support:appcompat-v7:23.1.0'
  compile 'com.android.support:design:23.1.0'
  compile 'com.android.support:recyclerview-v7:23.1.0'
  //compile 'com.android.support:preference-v7:23.1.0'
  compile 'joda-time:joda-time:2.3'
  // Dashclock
  compile 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
  // FilePicker
  compile 'com.nononsenseapps:filepicker:2.4.2'
  // OrgParser
  compile 'org.cowboyprogrammer:orgparser:1.3.0'
  // For Sync
  compile 'com.squareup.retrofit:retrofit:1.6.1'
  // Included libraries
  compile project(':external:datetimepicker')
  // annotations
  apt "org.androidannotations:androidannotations:$AAVersion"
  compile "org.androidannotations:androidannotations-api:$AAVersion"
  // Dropbox and non-free stuff
  playCompile fileTree(dir: 'src/play/libs', include: '*.jar')
  playBetaCompile fileTree(dir: 'src/play/libs', include: '*.jar')
  // Tests
  androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1'
  // Testing Support Library
  androidTestCompile 'com.android.support.test:runner:0.4'
  // Set this dependency to use JUnit 4 rules
  androidTestCompile 'com.android.support.test:rules:0.4'
  // Set this dependency to build and run Espresso tests
  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
  androidTestCompile 'com.android.support:support-annotations:23.1.0'
  // Hamcrest for the tests
  androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
  // for nav drawer tests
  androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.1'
  androidTestCompile 'com.android.support:support-v4:23.1.0'
  androidTestCompile 'com.android.support:recyclerview-v7:23.1.0'
  //Truth from Google (heh heh)
  androidTestCompile 'com.google.truth:truth:0.28'

  //for Appium
      compile files('src/test/java/testLib/apache-mime4j-0.6.jar')
      compile files('src/test/java/testLib/commons-codec-1.10.jar')
      compile files('src/test/java/testLib/commons-collections-3.2.1.jar')
      compile files('src/test/java/testLib/commons-exec-1.3.jar')
      compile files('src/test/java/testLib/commons-io-2.4.jar')
      compile files('src/test/java/testLib/commons-lang3-3.4.jar')
      compile files('src/test/java/testLib/commons-logging-1.1.3.jar')
      compile files('src/test/java/testLib/commons-validator-1.4.1.jar')
      compile files('src/test/java/testLib/gson-2.3.1.jar')
      compile files('src/test/java/testLib/guava-18.0.jar')
      compile files('src/test/java/testLib/hamcrest-core-1.3.jar')
      compile files('src/test/java/testLib/httpclient-4.4.1.jar')
      compile files('src/test/java/testLib/httpcore-4.4.1.jar')
      compile files('src/test/java/testLib/httpmime-4.4.1.jar')
      compile files('src/test/java/testLib/java-client-4.0.0.jar')
      compile files('src/test/java/testLib//selenium-java-2.47.1.jar')
    testCompile files('src/test/java/testLib//junit-4.12.jar')
}

